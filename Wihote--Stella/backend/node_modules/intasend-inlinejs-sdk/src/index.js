let agents = require("./agents")
var ProgressBar = require('progressbar.js')

function bindEvent(element, eventName, eventHandler) {
    if (element.addEventListener) {
        element.addEventListener(eventName, eventHandler, false);
    } else if (element.attachEvent) {
        element.attachEvent('on' + eventName, eventHandler);
    }
}

const VERSION = "3"
const IFRAME_ID = "INTASEND-WEBSDK-POPUP-IFRAME-" + VERSION
const MODAL_ELEMENT_ID = "INTASEND-WEBSDK-MODAL-" + VERSION

var IntaSend = function (obj) {
    let self = this
    obj = obj || {}
    this._btnElement = Object
    this._dataset = Object
    this._checkoutID = ""
    this._signature = ""
    this.version = VERSION
    this._publicAPIKey = obj.publicAPIKey
    this._redirectURL = obj.redirectURL
    this._live = obj.live || false
    this._element = obj.element || "intaSendPayButton"
    this.layout = obj.layout || "popup"

    this.is_mobile = agents.MobileCheck()

    this._showProcessing = function () {
        let isLoadIdt = document.createElement("isLoadIdt");
        isLoadIdt.id = "isLoadIdt"
        isLoadIdt.style.top = 0
        isLoadIdt.style.left = 0
        isLoadIdt.style.position = "fixed"
        document.body.appendChild(isLoadIdt);
        var line = new ProgressBar.Line('#isLoadIdt', {
            color: '#666',
            easing: 'easeInOut',
            strokeWidth: 1
        });
        line.animate(1);
    }

    this._hideProcessing = function () {
        let isLoadIdts = document.querySelectorAll('isLoadIdt');
        for (let x = 0; x < isLoadIdts.length; x++) {
            isLoadIdts[x].parentNode.removeChild(isLoadIdts[x]);
        }
    }

    this._createCheckoutRequest = function (payload) {
        let self = this
        payload.callback_url = this._redirectURL
        payload.public_key = this._publicAPIKey
        payload.host = window.location.protocol + "//" + window.location.host
        payload.is_mobile = this.is_mobile
        payload.layout = this.layout
        payload.version = this.version

        this._showProcessing()
        var xmlhttp = new XMLHttpRequest();
        var requestURL = "https://sandbox.intasend.com/api/v1/checkout/"
        if (this._live) {
            requestURL = "https://payment.intasend.com/api/v1/checkout/"
        }
        xmlhttp.open("POST", requestURL);
        xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xmlhttp.onload = function (ev) {
            let response = JSON.parse(xmlhttp.responseText)
            self._checkoutID = response.id
            self._signature = response.signature
            if (self._checkoutID && self._signature) {
                self._loadPaymentModal()
            } else {
                self._hideProcessing()
            }
        }
        xmlhttp.onerror = function (err) {
            alert("We experienced a problem while initiating your request. Please consider starting the payment process again. If this issue persist, please contact us at support@intasend.com")
            self._hideProcessing()
        }
        xmlhttp.send(JSON.stringify(payload));
    }

    this._clearElements = function () {
        let iframe = document.getElementById(IFRAME_ID);
        if (iframe) {
            iframe.parentNode.removeChild(iframe);
        }

        let modal = document.getElementById(MODAL_ELEMENT_ID);
        if (modal) {
            modal.parentNode.removeChild(modal);
        }
    }

    this._btnElement = document.getElementsByClassName(this._element)
    if (this._btnElement) {
        for (let i = 0; i < this._btnElement.length; ++i) {
            let btn = this._btnElement[i]
            btn.addEventListener('click', function () {
                let dataset = btn.dataset
                self._createCheckoutRequest(dataset)
            })
        }
    }

    this._loadPaymentModal = function () {
        try {
            if (this._checkoutID && this._signature) {
                this._clearElements()
                let modalContent = this._prepareModal()
                if (!this.is_mobile && this.layout === "popup") {
                    this._closeModalIcon(modalContent)
                }
                let iframe = this._prepareFrame(modalContent, this._checkoutID, this._signature)
                return iframe
            }
        } catch (err) {
            this._hideProcessing()
        }
    }

    this._prepareModal = function () {
        let modal = document.createElement("modal");
        modal.setAttribute("id", MODAL_ELEMENT_ID)
        if (this.layout === "popup") {
            modal.style.display = "flex"
            modal.style.position = "fixed"
            modal.style.zIndex = 1200
            modal.style.left = 0
            modal.style.top = 0
            modal.style.width = "100%"
            modal.style.height = "100%"
            modal.style.overflow = "auto"
            modal.style.backgroundColor = "rgb(0,0,0)"
            modal.style.backgroundColor = "rgba(0,0,0,0.7)"
        }
        document.body.appendChild(modal);

        let modalContent = document.createElement("modal-content")
        if (this.is_mobile) {
            modalContent.style.width = "100%";
        } else {
            if (this.layout === "popup") {
                modalContent.style.width = "380px";
            }
        }
        modalContent.style.height = "100%";
        modalContent.style.margin = "auto"
        modalContent.style.display = "block"
        if (!this.is_mobile) {
            modalContent.style.paddingTop = "20px"
            modalContent.style.backgroundColor = "transparent"
        } else {
            modalContent.style.paddingTop = "0px"
            modalContent.style.backgroundColor = "#ffffff"
        }

        modal.appendChild(modalContent)
        return modalContent
    }

    this.onClose = function () {
        let self = this
        if (this.layout === "popup") {
            bindEvent(window, 'message', function (e) {
                if (e.origin === "https://websdk-sandbox.intasend.com" || e.origin === "https://websdk.intasend.com") {
                    if (e.data.message) {
                        if (e.data.message.identitier == 'intasend-close-modal-cdrtl') {
                            self.exitPay()
                        }
                    }
                }
            });
        }
    }

    this._closeModalIcon = function (modalContent) {
        let self = this
        let iconHolder = document.createElement("div")
        let icon = document.createElement("div")
        icon.innerHTML = this._closeIconSVG()
        icon.style.cursor = "pointer"
        icon.style.right = "-32px"
        icon.style.bottom = "-32px"
        icon.style.position = "absolute"
        iconHolder.style.position = "relative"
        iconHolder.style.display = "block"
        iconHolder.style.height = "10px"
        iconHolder.style.zIndex = 1250
        iconHolder.appendChild(icon)
        modalContent.appendChild(iconHolder)

        icon.addEventListener('click', function () {
            self._clearElements()
        })
    }

    this._prepareFrame = function (modalContent, checkoutID, signature) {
        let data = {
            "checkout_id": checkoutID,
            "signature": signature
        }
        let encoded = btoa(JSON.stringify(data))
        let payload = {
            "checkout": encoded,
            "is_mobile": this.is_mobile
        }
        let params = new URLSearchParams(payload).toString()
        let ifrm = document.createElement("iframe");
        if (this._live) {
            ifrm.setAttribute("src", "https://websdk.intasend.com/?" + params);
        } else {
            ifrm.setAttribute("src", "https://websdk-sandbox.intasend.com/?" + params);
        }
        ifrm.setAttribute("id", IFRAME_ID)
        ifrm.style.width = "100%";
        if (!this.is_mobile) {
            ifrm.style.height = "100%";
        } else {
            ifrm.style.height = "100vh";
        }
        ifrm.style.border = 0;
        ifrm.frameborder = 0;
        ifrm.style.borderRadius = "0.25rem";

        ifrm.scrolling = "no";
        ifrm.onload = function () {
            self._hideProcessing()
        }

        modalContent.appendChild(ifrm)
        return ifrm
    }

    this._eventListener = function (eventName, callback) {
        bindEvent(window, 'message', function (e) {
            if (e.origin === "https://websdk-sandbox.intasend.com" || e.origin === "https://websdk.intasend.com") {
                if (e.data.message) {
                    if (e.data.message.identitier == 'intasend-status-update-cdrtl') {
                        if (e.data.message.state === eventName) {
                            callback(e.data.message)
                        }
                    }
                }

            }
        });
        return this
    }

    this._closeIconSVG = function () {
        return `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="54" height="54" viewBox="0 0 60 60">
        <defs>
          <filter id="Ellipse_11" x="0" y="0" width="60" height="60" filterUnits="userSpaceOnUse">
            <feOffset dy="3" input="SourceAlpha"/>
            <feGaussianBlur stdDeviation="3" result="blur"/>
            <feFlood flood-color="#6b6b6b" flood-opacity="0.157"/>
            <feComposite operator="in" in2="blur"/>
            <feComposite in="SourceGraphic"/>
          </filter>
        </defs>
        <g id="Group_142" data-name="Group 142" transform="translate(-1178 -327)">
          <g transform="matrix(1, 0, 0, 1, 1178, 327)" filter="url(#Ellipse_11)">
            <circle id="Ellipse_11-2" data-name="Ellipse 11" cx="21" cy="21" r="21" transform="translate(9 6)" fill="#fff"/>
          </g>
          <g id="x-circle" transform="translate(1196 342)">
            <circle id="Ellipse_12" data-name="Ellipse 12" cx="10" cy="10" r="10" transform="translate(2 2)" fill="none" stroke="#414141" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
            <line id="Line_3" data-name="Line 3" x1="6" y2="6" transform="translate(9 9)" fill="none" stroke="#414141" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
            <line id="Line_4" data-name="Line 4" x2="6" y2="6" transform="translate(9 9)" fill="none" stroke="#414141" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
          </g>
        </g>
      </svg>`
    }


    // Define default events
    this.onClose()
    this.on = this._eventListener;
    if (self._redirectURL) {
        this.on("COMPLETE", () => {
            window.location.href = self._redirectURL
        })
    }

    this.exitPay = function () {
        this._clearElements()
    }

    this.run = function (obj) {
        this._createCheckoutRequest(obj)
        return this
    }

    this.continue = function (payload) {
        this._checkoutID = payload.checkoutID
        this._signature = payload.signature
        this._live = payload.live || false
        this._showProcessing()
        this._loadPaymentModal()
        return this
    }
    return this
}

window.IntaSend = IntaSend;
module.exports = IntaSend;